{
  "_from": "@okta/oidc-middleware",
  "_id": "@okta/oidc-middleware@0.1.2",
  "_inBundle": false,
  "_integrity": "sha1-SOdqZ9bKZ0IVbgiLgjYLdS4VnUY=",
  "_location": "/@okta/oidc-middleware",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@okta%2foidc-middleware",
    "fetchSpec": "latest",
    "name": "@okta/oidc-middleware",
    "raw": "@okta/oidc-middleware",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@okta",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@okta/oidc-middleware/-/oidc-middleware-0.1.2.tgz",
  "_shasum": "48e76a67d6ca6742156e088b82360b752e159d46",
  "_shrinkwrap": null,
  "_spec": "@okta/oidc-middleware",
  "_where": "/home/vzlabuser/work7/javascript/okta1",
  "bugs": {
    "url": "https://github.com/okta/okta-oidc-js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "body-parser": "^1.18.2",
    "connect-ensure-login": "^0.1.1",
    "csurf": "^1.9.0",
    "express": "^4.16.3",
    "lodash": "^4.17.5",
    "negotiator": "^0.6.1",
    "openid-client": "^1.20.0",
    "passport": "^0.3.2",
    "uuid": "^3.1.0"
  },
  "deprecated": false,
  "description": "OpenId Connect middleware for authorization code flows",
  "devDependencies": {
    "cross-env": "^5.1.1",
    "ejs": "^2.5.7",
    "express-session": "^1.15.5",
    "mocha": "^5.0.0",
    "nock": "^9.1.6",
    "protractor": "^5.1.2",
    "read-package-tree": "^5.1.6",
    "server-destroy": "^1.0.1",
    "webdriver-manager": "^12.0.6"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "src"
  ],
  "homepage": "https://github.com/okta/okta-oidc-js/tree/master/packages/oidc-middleware",
  "keywords": [
    "OpenId Connect",
    "auth",
    "authentication",
    "oidc",
    "okta"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "@okta/oidc-middleware",
  "optionalDependencies": {},
  "readme": "# oidc-middleware\n\n[![npm version](https://img.shields.io/npm/v/@okta/oidc-middleware.svg?style=flat-square)](https://www.npmjs.com/package/@okta/oidc-middleware)\n[![build status](https://img.shields.io/travis/okta/okta-oidc-js/master.svg?style=flat-square)](https://travis-ci.org/okta/okta-oidc-js)\n\nThis package makes it easy to get your users logged in with Okta using OpenId Connect (OIDC).  It enables your Express application to participate in the [authorization code flow][auth-code-docs] flow by redirecting the user to Okta for authentication and handling the callback from Okta.  Once this flow is complete, a local session is created and the user context is saved for the duration of the session.\n\n## :warning: :construction: Alpha Preview :construction: :warning:\n\nThis library is under development and is currently in 0.x version series.  Breaking changes may be introduced at minor versions in the 0.x range.  Please lock your dependency to a specific version until this library reaches 1.x.\n\nNeed help? Contact [developers@okta.com](mailto:developers@okta.com) or use the [Okta Developer Forum].\n\n## Installation\n\n```sh\nnpm install --save @okta/oidc-middleware\n```\n\n## Prerequisites\n\n* You will need an Okta Developer Org, you can sign up for an account at https://developer.okta.com/signup/..\n* An OIDC application in your Org, configured for Web mode.  If you are new to Okta or this flow, we suggest following the [Express.js Quickstart][express-quickstart].\n* This integration depends on sessions to store user information. Ensure the [express-session middleware](https://github.com/expressjs/session) is added before you add `ExpressOIDC`.  By default, the session middleware uses a MemoryStore, which is not designed for production use. Use [another session store](https://github.com/expressjs/session#compatible-session-stores) for production.\n\n## Usage Example\n\nBelow is a terse Express application that examples the basic usage of this library.  If you'd like to clone a complete example, please see the [Okta Express Samples Repository](https://github.com/okta/samples-nodejs-express-4).\n\n```javascript\nconst express = require('express');\nconst session = require('express-session');\nconst { ExpressOIDC } = require('@okta/oidc-middleware');\n\nconst app = express();\nconst oidc = new ExpressOIDC({\n  issuer: 'https://{yourOktaDomain}.com/oauth2/default',\n  client_id: 'XXXXX',\n  client_secret: 'XXXXX',\n  redirect_uri: 'http://localhost:3000/authorization-code/callback',\n  scope: 'openid profile'\n});\n\napp.use(session({\n  secret: 'this-should-be-very-random',\n  resave: true,\n  saveUninitialized: false\n}));\napp.use(oidc.router);\napp.get('/', (req, res) => {\n  if (req.userinfo) {\n    res.send(`Hello ${req.userinfo.name}! <a href=\"logout\">Logout</a>`);\n  } else {\n    res.send('Please <a href=\"/login\">login</a>');\n  }\n});\napp.get('/protected', oidc.ensureAuthenticated(), (req, res) => {\n  res.send('Top Secret');\n});\napp.get('/logout', (req, res) => {\n  req.logout();\n  res.redirect('/');\n});\noidc.on('ready', () => {\n  app.listen(3000, () => console.log('app started'));\n});\noidc.on('error', err => {\n  // An error occurred while setting up OIDC\n});\n```\n\n## ExpressOIDC API\n\n\n### new ExpressOIDC(config)\n\nTo configure your OIDC integration, create an instance of `ExpressOIDC` and pass options. Most apps will need this basic configuration:\n\n```javascript\nconst { ExpressOIDC } = require('@okta/oidc-middleware');\n\nconst oidc = new ExpressOIDC({\n  issuer: YOUR_ISSUER,\n  client_id: YOUR_CLIENT_ID,\n  client_secret: YOUR_CLIENT_SECRET,\n  redirect_uri: YOUR_REDIRECT_URI,\n  scope: 'openid profile'\n});\n```\n\nRequired config:\n\n* **issuer** - The OIDC provider (e.g. `https://YOUR_ORG.oktapreview.com/oauth2/default`)\n* **client_id** - An id provided when you create an OIDC app in your Okta Org\n* **client_secret** - A secret provided when you create an OIDC app in your Okta Org\n* **redirect_uri** - The callback for your app. Locally, this is usually `http://localhost:3000/authorization-code/callback`. When deployed, this should be `https://YOUR_PROD_DOMAIN/authorization-code/callback`.\n\nOptional config:\n\n* **response_type** - Defaults to `code`\n* **scope** - Defaults to `openid`, which will only return the `sub` claim. To obtain more information about the user, use `openid profile`. For a list of scopes and claims, please see [Scope-dependent claims](https://developer.okta.com/standards/OIDC/index.html#scope-dependent-claims-not-always-returned) for more information.\n* **routes** - Allows customization of the generated routes. See [Customizing Routes](#customizing-routes) for details.\n* **maxClockSkew** - Defaults to 120. This is the maximum difference allowed between your server's clock and Okta's in seconds. Setting this to 0 is not recommended, because it increases the likelihood that valid jwts will fail verification due to `nbf` and `exp` issues.\n* **timeout** - Defaults to 10000 milliseconds. The HTTP max timeout for any requests to the issuer.  If a timeout exception occurs you can catch it with the `oidc.on('error', fn)` handler.\n\n### oidc.router\n\nThis should be added to your express app to attach the login and callback routes:\n\n```javascript\nconst { ExpressOIDC } = require('@okta/oidc-middleware');\nconst express = require('express');\n\nconst app = express();\nconst oidc = new ExpressOIDC({ /* options */ });\n\napp.use(oidc.router);\n```\n\nIt's required in order for `ensureAuthenticated` and `isAuthenticated` to work and adds the following routes:\n\n* `/login` - redirects to the Okta sign-in page by default\n* `/authorization-code/callback` - processes the OIDC response, then attaches userinfo to the session\n\n### oidc.on('ready', callback)\n\nThe middleware must retrieve some information about your client before starting the server. You **must** wait until ExpressOIDC is ready to start your server.\n\n```javascript\noidc.on('ready', () => {\n  app.listen(3000, () => console.log('app started'));\n});\n```\n\n### oidc.on('error', callback)\n\nThis is triggered if an error occurs while ExpressOIDC is trying to start.\n\n```javascript\noidc.on('error', err => {\n  // An error occurred while setting up OIDC\n});\n```\n\n### oidc.ensureAuthenticated({ redirectTo?: '/uri' })\n\nUse this to protect your routes. If not authenticated, this will redirect to the login route and trigger the authentication flow. If the request prefers JSON then a 401 error response will be sent.\n\n```javascript\napp.get('/protected', oidc.ensureAuthenticated(), (req, res) => {\n  res.send('Protected stuff');\n});\n```\n\nThe `redirectTo` option can be used to redirect the user to a specific URI on your site, after a successful authentication callback.\n\n### req.isAuthenticated()\n\nThis allows you to determine if a user is authenticated.\n\n```javascript\napp.get('/', (req, res) => {\n  if (req.isAuthenticated()) {\n    res.send('Logged in');\n  } else {\n    res.send('Not logged in');\n  }\n});\n```\n\n### req.logout()\n\nThis allows you to end the session.\n\n```javascript\napp.get('/logout', (req, res) => {\n  req.logout();\n  res.redirect('/');\n});\n```\n\n### req.userinfo\n\nThis provides information about the authenticated user, and is obtained from the [userinfo endpoint of the authorization server](https://developer.okta.com/docs/api/resources/oidc.html#get-user-information) and depends on the scope requested (see scope option above):\n\n```javascript\napp.get('/', (req, res) => {\n  if (req.userinfo) {\n    res.send(`Hi ${req.userinfo.sub}!`);\n  } else {\n    res.send('Hi!');\n  }\n});\n```\n\n### Customizing Routes\n\nIf you need to modify the default login and callback routes, the `routes` config option is available.\n\n```javascript\nconst oidc = new ExpressOIDC({\n  // ...\n  routes: {\n    login: {\n      path: '/different/login'\n    },\n    callback: {\n      path: '/different/callback',\n      handler: (req, res, next) => {\n        // Perform custom logic before final redirect, then call next()\n      },\n      defaultRedirect: '/home'\n    }\n  }\n});\n```\n\n* **`callback.defaultRedirect`** - Where the user is redirected to after a successful authentication callback, if no `returnTo` value was specified by `oidc.ensureAuthenticated()`. Defaults to `/`.\n* **`callback.failureRedirect`** - Where the user is redirected to after authentication failure, defaults to a page which just shows error message.\n* **`callback.handler`** - A function that is called after a successful authentication callback, but before the final redirect within your application. Useful for requirements such as conditional post-authentication redirects, or sending data to logging systems.\n* **`callback.path`** - The URI that this library will host the callback handler on. Defaults to `/authorization-code/callback`\n* **`login.path`** - The URI that redirects the user to the authorize endpoint. Defaults to `/login`.\n\n### Using a Custom Login Page\n\nBy default the end-user will be redirected to the Okta Sign-In Page when authentication is required, this page is hosted on your Okta Org domain.  It is possible to host this experience within your own application by installing the [Okta Sign-In Widget](https://github.com/okta/okta-signin-widget) into a page in your application.  Please refer to the [test example file](test/e2e/harness/views/login.ejs) for an example of how the widget should be configured for this use case.\n\nOnce you have created your login page, you can use the `viewHandler` option to intercept the login page request and render your own custom page:\n\n```javascript\n\nconst oidc = new ExpressOIDC({\n  { /* options */ }\n  routes: {\n    login: {\n      viewHandler: (req, res, next) => {\n        const baseUrl = url.parse(baseConfig.issuer).protocol + '//' + url.parse(baseConfig.issuer).host;\n        // Render your custom login page, you must create this view for your application and use the Okta Sign-In Widget\n        res.render('login', {\n          csrfToken: req.csrfToken(),\n          baseUrl: baseUrl\n        });\n      }\n    }\n  }\n});\n```\n\n### Extending the User\n\nTo add additional data about a user from your database, we recommend adding middleware to extend `req`.\n\n```javascript\nconst { ExpressOIDC } = require('@okta/oidc-middleware');\nconst express = require('express');\nconst session = require('express-session');\n\nconst app = express();\napp.use(session({ /* options */ }));\nconst oidc = new ExpressOIDC({ /* options */ });\napp.use(oidc.router);\n\nfunction addUserContext(req, res, next) {\n  if (!req.userinfo) return next();\n\n  // request additional info from your database\n  User.findOne({ id: req.userinfo.sub }, (err, user) => {\n    if (err) return next(err);\n    req.user = user;\n    next();\n  });\n}\n\napp.use(addUserContext);\n\n{ /* options */ } // add other routes\n\noidc.on('ready', () => app.listen(3000));\noidc.on('error', err => console.log('could not start', err));\n```\n\n[auth-code-docs]: https://developer.okta.com/standards/OAuth/#basic-flows\n[express-quickstart]: https://developer.okta.com/quickstart/#/okta-sign-in-page/nodejs/express\n[Okta Developer Forum]: https://devforum.okta.com/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/okta/okta-oidc-js.git"
  },
  "scripts": {
    "test": "npm run test:unit && npm run test:e2e && npm run test:integration",
    "test:e2e": "webdriver-manager update --gecko false && protractor test/e2e/conf.js",
    "test:integration": "sh tools/runIntegrationTests.sh",
    "test:unit": "mocha test/unit/*.js"
  },
  "version": "0.1.2"
}
